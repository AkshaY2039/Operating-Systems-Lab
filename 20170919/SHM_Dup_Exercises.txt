Try programs using dup and SHM to understand the implementation...
Some problems for example are:
(1) String sharing
(2) Case conversion
(3) Word Count simulation for char, word, line and sentence count
(4) String reversal and palindrome check using shared memory.

system calls for shm (for the consumer which we didnt cover in the class).
if there is linker error on the linux you sit, try compiling it with
-lrt option .

code for producer.c:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>

int main()
{
	const int SIZE = 4096;
	const char *name = "OS";
	const char *message0= "Studying ";
	const char *message1= "Operating Systems ";
	const char *message2= "Is Fun!";

	int shm_fd;
	void *ptr;

	/* create the shared memory segment */
	shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);

	/* configure the size of the shared memory segment */
	ftruncate(shm_fd,SIZE);

	/* now map the shared memory segment in the address space of the process */
	ptr = mmap(0,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
	if (ptr == MAP_FAILED) {
		printf("Map failed\n");
		return -1;
	}

	/**
	 * Now write to the shared memory region.
 	 *
	 * Note we must increment the value of ptr after each write.
	 */
	sprintf(ptr,"%s",message0);
	ptr += strlen(message0);
	sprintf(ptr,"%s",message1);
	ptr += strlen(message1);
	sprintf(ptr,"%s",message2);
	ptr += strlen(message2);

	return 0;
}

code for consumer.c:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <errno.h>
#include <string.h>

void display(char *prog, char *bytes, int n);

int main(void)
{
  const char *name = "OS";	// file name
  const int SIZE = 4096;		// file size

  int shm_fd;		// file descriptor, from shm_open()
  char *shm_base;	// base address, from mmap()

  /* open the shared memory segment as if it was a file */
  shm_fd = shm_open(name, O_RDONLY, 0666);
  if (shm_fd == -1) {
    printf("cons: Shared memory failed: %s\n", strerror(errno));
    exit(1);
  }

  /* map the shared memory segment to the address space of the process */
  shm_base = mmap(0, SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);
  if (shm_base == MAP_FAILED) {
    printf("cons: Map failed: %s\n", strerror(errno));
    // close and unlink?
    exit(1);
  }

  /* read from the mapped shared memory segment */
  //display("cons", shm_base, 64);	// first as bytes, then as a string
  printf("%s", shm_base);

  
/* remove the mapped shared memory segment from the address space of the process */
//  if (munmap(shm_base, SIZE) == -1) {
    //printf("cons: Unmap failed: %s\n", strerror(errno));
    //exit(1);
  //}

  /* close the shared memory segment as if it was a file */
//  if (close(shm_fd) == -1) {
    //printf("cons: Close failed: %s\n", strerror(errno));
    //exit(1);
  //}

  /* remove the shared memory segment from the file system */
//  if (shm_unlink(name) == -1) {
  //  printf("cons: Error removing %s: %s\n", name, strerror(errno));
    exit(1);
//  }
shm_unlink(name);
  return 0;
}